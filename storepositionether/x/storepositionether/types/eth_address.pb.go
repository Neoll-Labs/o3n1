// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storepositionether/storepositionether/eth_address.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EthAddress struct {
	Index           string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Block           uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	Nonce           uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	StoragePosition uint64 `protobuf:"varint,4,opt,name=storagePosition,proto3" json:"storagePosition,omitempty"`
	Active          bool   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *EthAddress) Reset()         { *m = EthAddress{} }
func (m *EthAddress) String() string { return proto.CompactTextString(m) }
func (*EthAddress) ProtoMessage()    {}
func (*EthAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ad2861c9fc47e79, []int{0}
}
func (m *EthAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthAddress.Merge(m, src)
}
func (m *EthAddress) XXX_Size() int {
	return m.Size()
}
func (m *EthAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_EthAddress.DiscardUnknown(m)
}

var xxx_messageInfo_EthAddress proto.InternalMessageInfo

func (m *EthAddress) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *EthAddress) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *EthAddress) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *EthAddress) GetStoragePosition() uint64 {
	if m != nil {
		return m.StoragePosition
	}
	return 0
}

func (m *EthAddress) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func init() {
	proto.RegisterType((*EthAddress)(nil), "storepositionether.storepositionether.EthAddress")
}

func init() {
	proto.RegisterFile("storepositionether/storepositionether/eth_address.proto", fileDescriptor_7ad2861c9fc47e79)
}

var fileDescriptor_7ad2861c9fc47e79 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2f, 0x2e, 0xc9, 0x2f,
	0x4a, 0x2d, 0xc8, 0x2f, 0xce, 0x2c, 0xc9, 0xcc, 0xcf, 0x4b, 0x2d, 0xc9, 0x48, 0x2d, 0xd2, 0xc7,
	0x22, 0x94, 0x5a, 0x92, 0x11, 0x9f, 0x98, 0x92, 0x52, 0x94, 0x5a, 0x5c, 0xac, 0x57, 0x50, 0x94,
	0x5f, 0x92, 0x2f, 0xa4, 0x8a, 0xa9, 0x4a, 0x0f, 0x53, 0x48, 0x69, 0x02, 0x23, 0x17, 0x97, 0x6b,
	0x49, 0x86, 0x23, 0x44, 0xaf, 0x90, 0x08, 0x17, 0x6b, 0x66, 0x5e, 0x4a, 0x6a, 0x85, 0x04, 0xa3,
	0x02, 0xa3, 0x06, 0x67, 0x10, 0x84, 0x03, 0x12, 0x4d, 0xca, 0xc9, 0x4f, 0xce, 0x96, 0x60, 0x52,
	0x60, 0xd4, 0x60, 0x09, 0x82, 0x70, 0x40, 0xa2, 0x79, 0xf9, 0x79, 0xc9, 0xa9, 0x12, 0xcc, 0x10,
	0x51, 0x30, 0x47, 0x48, 0x83, 0x8b, 0x1f, 0x64, 0x4d, 0x62, 0x7a, 0x6a, 0x00, 0xd4, 0x22, 0x09,
	0x16, 0xb0, 0x3c, 0xba, 0xb0, 0x90, 0x18, 0x17, 0x5b, 0x62, 0x72, 0x49, 0x66, 0x59, 0xaa, 0x04,
	0xab, 0x02, 0xa3, 0x06, 0x47, 0x10, 0x94, 0xe7, 0xe4, 0x7e, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47,
	0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d,
	0xc7, 0x72, 0x0c, 0x51, 0xba, 0x58, 0x7c, 0x5e, 0x81, 0x2d, 0x38, 0x4a, 0x2a, 0x0b, 0x52, 0x8b,
	0x93, 0xd8, 0xc0, 0x21, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x89, 0xe0, 0x68, 0x44,
	0x01, 0x00, 0x00,
}

func (m *EthAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.StoragePosition != 0 {
		i = encodeVarintEthAddress(dAtA, i, uint64(m.StoragePosition))
		i--
		dAtA[i] = 0x20
	}
	if m.Nonce != 0 {
		i = encodeVarintEthAddress(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if m.Block != 0 {
		i = encodeVarintEthAddress(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintEthAddress(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEthAddress(dAtA []byte, offset int, v uint64) int {
	offset -= sovEthAddress(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EthAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovEthAddress(uint64(l))
	}
	if m.Block != 0 {
		n += 1 + sovEthAddress(uint64(m.Block))
	}
	if m.Nonce != 0 {
		n += 1 + sovEthAddress(uint64(m.Nonce))
	}
	if m.StoragePosition != 0 {
		n += 1 + sovEthAddress(uint64(m.StoragePosition))
	}
	if m.Active {
		n += 2
	}
	return n
}

func sovEthAddress(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEthAddress(x uint64) (n int) {
	return sovEthAddress(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EthAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEthAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEthAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePosition", wireType)
			}
			m.StoragePosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoragePosition |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEthAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEthAddress(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEthAddress
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthAddress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthAddress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEthAddress
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEthAddress
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEthAddress
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEthAddress        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEthAddress          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEthAddress = fmt.Errorf("proto: unexpected end of group")
)
